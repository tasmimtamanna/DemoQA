{"content": {"suites": {"0": {"status": {"total_pass": 2, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 4}, "tests": {"0": {"status": "PASS", "message": "", "test_name": "test_browser_config", "rerun": "0"}, "1": {"status": "PASS", "message": "", "test_name": "test_Full_name", "rerun": "0"}, "2": {"status": "ERROR", "message": "@pytest.fixture()\n    def browser_config():\n        global driver\n    \n>       driver = webdriver.Firefox(service=FirefoxService(GeckoDriverManager().install()))\n\ntest_element.py:13: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Users\\Tasmim\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\webdriver_manager\\firefox.py:39: in install\n    driver_path = self._get_driver_binary_path(self.driver)\nC:\\Users\\Tasmim\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\webdriver_manager\\core\\manager.py:35: in _get_driver_binary_path\n    binary_path = self._cache_manager.find_driver(driver)\nC:\\Users\\Tasmim\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\webdriver_manager\\core\\driver_cache.py:105: in find_driver\n    driver_version = self.get_cache_key_driver_version(driver)\nC:\\Users\\Tasmim\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\webdriver_manager\\core\\driver_cache.py:151: in get_cache_key_driver_version\n    return driver.get_driver_version_to_download()\nC:\\Users\\Tasmim\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\webdriver_manager\\core\\driver.py:48: in get_driver_version_to_download\n    return self.get_latest_release_version()\nC:\\Users\\Tasmim\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\webdriver_manager\\drivers\\firefox.py:29: in get_latest_release_version\n    resp = self._http_client.get(\nC:\\Users\\Tasmim\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\webdriver_manager\\core\\http.py:36: in get\n    self.validate_response(resp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresp = <Response [403]>\n\n    @staticmethod\n    def validate_response(resp: requests.Response):\n        status_code = resp.status_code\n        if status_code == 404:\n            raise ValueError(f\"There is no such driver by url {resp.url}\")\n        elif status_code == 401:\n            raise ValueError(f\"API Rate limit exceeded. You have to add GH_TOKEN!!!\")\n        elif resp.status_code != 200:\n>           raise ValueError(\n                f\"response body:\\n{resp.text}\\n\"\n                f\"request url:\\n{resp.request.url}\\n\"\n                f\"response headers:\\n{dict(resp.headers)}\\n\"\n            )\nE           ValueError: response body:\nE           {\"message\":\"API rate limit exceeded for 103.148.173.255. (But here's the good news: Authenticated requests get a higher rate limit. Check out the documentation for more details.)\",\"documentation_url\":\"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"}\nE           \nE           request url:\nE           https://api.github.com/repos/mozilla/geckodriver/releases/latest\nE           response headers:\nE           {'Date': 'Sun, 02 Jun 2024 12:22:52 GMT', 'Server': 'Varnish', 'Strict-Transport-Security': 'max-age=31536000; includeSubdomains; preload', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'deny', 'X-XSS-Protection': '1; mode=block', 'Content-Security-Policy': \"default-src 'none'; style-src 'unsafe-inline'\", 'Access-Control-Allow-Origin': '*', 'Access-Control-Expose-Headers': 'ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Reset, X-RateLimit-Used, X-RateLimit-Resource, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset', 'Content-Type': 'application/json; charset=utf-8', 'Referrer-Policy': 'origin-when-cross-origin, strict-origin-when-cross-origin', 'X-GitHub-Media-Type': 'github.v3; format=json', 'X-RateLimit-Limit': '60', 'X-RateLimit-Remaining': '0', 'X-RateLimit-Reset': '1717332372', 'X-RateLimit-Resource': 'core', 'X-RateLimit-Used': '60', 'Content-Length': '281', 'X-GitHub-Request-Id': 'EDCA:855A4:1DACBDB:1E21C88:665C641C'}\n\nC:\\Users\\Tasmim\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\webdriver_manager\\core\\http.py:19: ValueError\n", "test_name": "test_Email", "rerun": "0"}, "3": {"status": "ERROR", "message": "@pytest.fixture()\n    def browser_config():\n        global driver\n    \n>       driver = webdriver.Firefox(service=FirefoxService(GeckoDriverManager().install()))\n\ntest_element.py:13: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Users\\Tasmim\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\webdriver_manager\\firefox.py:39: in install\n    driver_path = self._get_driver_binary_path(self.driver)\nC:\\Users\\Tasmim\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\webdriver_manager\\core\\manager.py:35: in _get_driver_binary_path\n    binary_path = self._cache_manager.find_driver(driver)\nC:\\Users\\Tasmim\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\webdriver_manager\\core\\driver_cache.py:105: in find_driver\n    driver_version = self.get_cache_key_driver_version(driver)\nC:\\Users\\Tasmim\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\webdriver_manager\\core\\driver_cache.py:151: in get_cache_key_driver_version\n    return driver.get_driver_version_to_download()\nC:\\Users\\Tasmim\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\webdriver_manager\\core\\driver.py:48: in get_driver_version_to_download\n    return self.get_latest_release_version()\nC:\\Users\\Tasmim\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\webdriver_manager\\drivers\\firefox.py:29: in get_latest_release_version\n    resp = self._http_client.get(\nC:\\Users\\Tasmim\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\webdriver_manager\\core\\http.py:36: in get\n    self.validate_response(resp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresp = <Response [403]>\n\n    @staticmethod\n    def validate_response(resp: requests.Response):\n        status_code = resp.status_code\n        if status_code == 404:\n            raise ValueError(f\"There is no such driver by url {resp.url}\")\n        elif status_code == 401:\n            raise ValueError(f\"API Rate limit exceeded. You have to add GH_TOKEN!!!\")\n        elif resp.status_code != 200:\n>           raise ValueError(\n                f\"response body:\\n{resp.text}\\n\"\n                f\"request url:\\n{resp.request.url}\\n\"\n                f\"response headers:\\n{dict(resp.headers)}\\n\"\n            )\nE           ValueError: response body:\nE           {\"message\":\"API rate limit exceeded for 103.148.173.255. (But here's the good news: Authenticated requests get a higher rate limit. Check out the documentation for more details.)\",\"documentation_url\":\"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"}\nE           \nE           request url:\nE           https://api.github.com/repos/mozilla/geckodriver/releases/latest\nE           response headers:\nE           {'Date': 'Sun, 02 Jun 2024 12:22:56 GMT', 'Server': 'Varnish', 'Strict-Transport-Security': 'max-age=31536000; includeSubdomains; preload', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'deny', 'X-XSS-Protection': '1; mode=block', 'Content-Security-Policy': \"default-src 'none'; style-src 'unsafe-inline'\", 'Access-Control-Allow-Origin': '*', 'Access-Control-Expose-Headers': 'ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Reset, X-RateLimit-Used, X-RateLimit-Resource, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset', 'Content-Type': 'application/json; charset=utf-8', 'Referrer-Policy': 'origin-when-cross-origin, strict-origin-when-cross-origin', 'X-GitHub-Media-Type': 'github.v3; format=json', 'X-RateLimit-Limit': '60', 'X-RateLimit-Remaining': '0', 'X-RateLimit-Reset': '1717332372', 'X-RateLimit-Resource': 'core', 'X-RateLimit-Used': '60', 'Content-Length': '281', 'X-GitHub-Request-Id': 'EDCC:3817D9:5DFF921:5F6980C:665C6420'}\n\nC:\\Users\\Tasmim\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\webdriver_manager\\core\\http.py:19: ValueError\n", "test_name": "test_Current_address", "rerun": "0"}, "4": {"status": "ERROR", "message": "@pytest.fixture()\n    def browser_config():\n        global driver\n    \n>       driver = webdriver.Firefox(service=FirefoxService(GeckoDriverManager().install()))\n\ntest_element.py:13: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Users\\Tasmim\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\webdriver_manager\\firefox.py:39: in install\n    driver_path = self._get_driver_binary_path(self.driver)\nC:\\Users\\Tasmim\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\webdriver_manager\\core\\manager.py:35: in _get_driver_binary_path\n    binary_path = self._cache_manager.find_driver(driver)\nC:\\Users\\Tasmim\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\webdriver_manager\\core\\driver_cache.py:105: in find_driver\n    driver_version = self.get_cache_key_driver_version(driver)\nC:\\Users\\Tasmim\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\webdriver_manager\\core\\driver_cache.py:151: in get_cache_key_driver_version\n    return driver.get_driver_version_to_download()\nC:\\Users\\Tasmim\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\webdriver_manager\\core\\driver.py:48: in get_driver_version_to_download\n    return self.get_latest_release_version()\nC:\\Users\\Tasmim\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\webdriver_manager\\drivers\\firefox.py:29: in get_latest_release_version\n    resp = self._http_client.get(\nC:\\Users\\Tasmim\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\webdriver_manager\\core\\http.py:36: in get\n    self.validate_response(resp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresp = <Response [403]>\n\n    @staticmethod\n    def validate_response(resp: requests.Response):\n        status_code = resp.status_code\n        if status_code == 404:\n            raise ValueError(f\"There is no such driver by url {resp.url}\")\n        elif status_code == 401:\n            raise ValueError(f\"API Rate limit exceeded. You have to add GH_TOKEN!!!\")\n        elif resp.status_code != 200:\n>           raise ValueError(\n                f\"response body:\\n{resp.text}\\n\"\n                f\"request url:\\n{resp.request.url}\\n\"\n                f\"response headers:\\n{dict(resp.headers)}\\n\"\n            )\nE           ValueError: response body:\nE           {\"message\":\"API rate limit exceeded for 103.148.173.255. (But here's the good news: Authenticated requests get a higher rate limit. Check out the documentation for more details.)\",\"documentation_url\":\"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"}\nE           \nE           request url:\nE           https://api.github.com/repos/mozilla/geckodriver/releases/latest\nE           response headers:\nE           {'Date': 'Sun, 02 Jun 2024 12:22:59 GMT', 'Server': 'Varnish', 'Strict-Transport-Security': 'max-age=31536000; includeSubdomains; preload', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'deny', 'X-XSS-Protection': '1; mode=block', 'Content-Security-Policy': \"default-src 'none'; style-src 'unsafe-inline'\", 'Access-Control-Allow-Origin': '*', 'Access-Control-Expose-Headers': 'ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Reset, X-RateLimit-Used, X-RateLimit-Resource, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset', 'Content-Type': 'application/json; charset=utf-8', 'Referrer-Policy': 'origin-when-cross-origin, strict-origin-when-cross-origin', 'X-GitHub-Media-Type': 'github.v3; format=json', 'X-RateLimit-Limit': '60', 'X-RateLimit-Remaining': '0', 'X-RateLimit-Reset': '1717332372', 'X-RateLimit-Resource': 'core', 'X-RateLimit-Used': '60', 'Content-Length': '281', 'X-GitHub-Request-Id': 'EDCF:38455B:5E05606:5F6F549:665C6423'}\n\nC:\\Users\\Tasmim\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\webdriver_manager\\core\\http.py:19: ValueError\n", "test_name": "test_Permanent_address", "rerun": "0"}, "5": {"status": "ERROR", "message": "@pytest.fixture()\n    def browser_config():\n        global driver\n    \n>       driver = webdriver.Firefox(service=FirefoxService(GeckoDriverManager().install()))\n\ntest_element.py:13: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Users\\Tasmim\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\webdriver_manager\\firefox.py:39: in install\n    driver_path = self._get_driver_binary_path(self.driver)\nC:\\Users\\Tasmim\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\webdriver_manager\\core\\manager.py:35: in _get_driver_binary_path\n    binary_path = self._cache_manager.find_driver(driver)\nC:\\Users\\Tasmim\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\webdriver_manager\\core\\driver_cache.py:105: in find_driver\n    driver_version = self.get_cache_key_driver_version(driver)\nC:\\Users\\Tasmim\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\webdriver_manager\\core\\driver_cache.py:151: in get_cache_key_driver_version\n    return driver.get_driver_version_to_download()\nC:\\Users\\Tasmim\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\webdriver_manager\\core\\driver.py:48: in get_driver_version_to_download\n    return self.get_latest_release_version()\nC:\\Users\\Tasmim\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\webdriver_manager\\drivers\\firefox.py:29: in get_latest_release_version\n    resp = self._http_client.get(\nC:\\Users\\Tasmim\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\webdriver_manager\\core\\http.py:36: in get\n    self.validate_response(resp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresp = <Response [403]>\n\n    @staticmethod\n    def validate_response(resp: requests.Response):\n        status_code = resp.status_code\n        if status_code == 404:\n            raise ValueError(f\"There is no such driver by url {resp.url}\")\n        elif status_code == 401:\n            raise ValueError(f\"API Rate limit exceeded. You have to add GH_TOKEN!!!\")\n        elif resp.status_code != 200:\n>           raise ValueError(\n                f\"response body:\\n{resp.text}\\n\"\n                f\"request url:\\n{resp.request.url}\\n\"\n                f\"response headers:\\n{dict(resp.headers)}\\n\"\n            )\nE           ValueError: response body:\nE           {\"message\":\"API rate limit exceeded for 103.148.173.255. (But here's the good news: Authenticated requests get a higher rate limit. Check out the documentation for more details.)\",\"documentation_url\":\"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"}\nE           \nE           request url:\nE           https://api.github.com/repos/mozilla/geckodriver/releases/latest\nE           response headers:\nE           {'Date': 'Sun, 02 Jun 2024 12:23:02 GMT', 'Server': 'Varnish', 'Strict-Transport-Security': 'max-age=31536000; includeSubdomains; preload', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'deny', 'X-XSS-Protection': '1; mode=block', 'Content-Security-Policy': \"default-src 'none'; style-src 'unsafe-inline'\", 'Access-Control-Allow-Origin': '*', 'Access-Control-Expose-Headers': 'ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Reset, X-RateLimit-Used, X-RateLimit-Resource, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset', 'Content-Type': 'application/json; charset=utf-8', 'Referrer-Policy': 'origin-when-cross-origin, strict-origin-when-cross-origin', 'X-GitHub-Media-Type': 'github.v3; format=json', 'X-RateLimit-Limit': '60', 'X-RateLimit-Remaining': '0', 'X-RateLimit-Reset': '1717332372', 'X-RateLimit-Resource': 'core', 'X-RateLimit-Used': '60', 'Content-Length': '281', 'X-GitHub-Request-Id': 'EDD2:171EA:34B0802:3589D25:665C6426'}\n\nC:\\Users\\Tasmim\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\webdriver_manager\\core\\http.py:19: ValueError\n", "test_name": "test_Submit_button", "rerun": "0"}}, "suite_name": "test_element.py"}}}, "date": "June 02, 2024", "start_time": 1717330978.9549453, "total_suite": 1, "status": "FAIL", "status_list": {"pass": "2", "fail": "0", "skip": "0", "error": "4", "xpass": "0", "xfail": "0", "rerun": "0"}, "total_tests": "6"}